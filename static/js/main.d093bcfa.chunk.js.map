{"version":3,"sources":["components/common/error-field.js","components/common/validateForm.js","components/SignUpForm.js","components/common/validateInfo.js","components/SignUpInfo.js","components/SignUpFinished.js","components/Signup.js","reducer/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["ErrorField","_ref","label","type","input","placeholder","_ref$meta","meta","error","errorText","touched","react_default","a","createElement","style","color","className","Object","assign","validate","email","password","confirmpassword","errors","test","length","SignUpForm","onSubmit","this","props","handleSubmit","Field","name","component","Component","reduxForm","form","day","month","year","reg","mydate","Date","setFullYear","currdate","getFullYear","SignUpInfo","state","gender","onRadioBtnChanged","e","_this","setState","currentTarget","value","initialize","aboutUs","_this$props","onBackSignUpInfoHandler","checked","onChange","onClick","SignUpFinished","handleInfoDataForm","Signup","step","dataForm","submit","values","objectSpread","console","log","concat","components_SignUpForm","components_SignUpInfo","components_SignUpFinished","connect","combineReducers","enhancer","applyMiddleware","thunk","store","createStore","reducer","window","App","es","BrowserRouter","Switch","Route","path","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d093bcfa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ErrorField = ({\r\n  label,\r\n  type,\r\n  input,\r\n  placeholder,\r\n  meta: { error, touched },\r\n}) => {\r\n  const errorText = touched && error && (\r\n    <label style={{ color: '#db2022' }}>{error}</label>\r\n  );\r\n  return (\r\n    <div className=\"wrap-input\">\r\n      {errorText ? errorText : label}{' '}\r\n      <input {...input} placeholder={placeholder} type={type} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorField;\r\n","const validate = ({ email, password, confirmpassword }) => {\r\n  const errors = {};\r\n  let reg = /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/;\r\n\r\n  if (!email) errors.email = 'email is required';\r\n  else if (!reg.test(email)) errors.email = 'email is invalid';\r\n\r\n  if (!password) errors.password = 'password is a required field';\r\n  else if (password.length < 6) errors.password = 'password is too short';\r\n\r\n  if (!confirmpassword) errors.confirmpassword = 'confirm password is required';\r\n  else if (confirmpassword !== password)\r\n    errors.confirmpassword = 'Password mismatched';\r\n\r\n  return errors;\r\n};\r\n\r\nexport default validate;\r\n","import React, { Component } from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport ErrorField from './common/error-field';\r\nimport validate from './common/validateForm';\r\n\r\nclass SignUpForm extends Component {\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.handleSubmit}>\r\n        <div className=\"wrap-form\">\r\n          <Field label=\"Email\" name=\"email\" component={ErrorField} />\r\n          <Field\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            component={ErrorField}\r\n            type=\"password\"\r\n          />\r\n          <Field\r\n            label=\"confirm password\"\r\n            name=\"confirmpassword\"\r\n            component={ErrorField}\r\n            type=\"password\"\r\n          />\r\n        </div>\r\n        <footer>\r\n          <button type=\"submit\" className=\"footer-btn\">\r\n            Next <i className=\"fas fa-arrow-right\" />\r\n          </button>\r\n        </footer>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'auth',\r\n  validate,\r\n})(SignUpForm);\r\n","const validate = ({ day, month, year }) => {\r\n  const errors = {};\r\n  let reg = /[^[0-9]/;\r\n  let mydate = new Date();\r\n  mydate.setFullYear(year, month - 1, day);\r\n  let currdate = new Date();\r\n  currdate.setFullYear(currdate.getFullYear() - 18);\r\n\r\n  if (!day) errors.day = 'day is required';\r\n  else if (reg.test(day) || !(31 >= day) || !(day >= 1))\r\n    errors.day = 'incorrect date';\r\n  else if (day.length === 1) errors.day = 'need 2 numbers';\r\n\r\n  if (!month) errors.month = 'month is required';\r\n  else if (reg.test(month) || !(12 >= month) || !(month >= 1))\r\n    errors.month = 'incorrect date';\r\n  else if (month.length === 1) errors.month = 'need 2 numbers';\r\n\r\n  if (!year) errors.year = 'year is required';\r\n  else if (reg.test(year) || !(2019 >= year) || !(year >= 1955))\r\n    errors.year = 'incorrect date';\r\n  else if (currdate < mydate) errors.year = 'no 18 years old';\r\n\r\n  return errors;\r\n};\r\n\r\nexport default validate;\r\n","import React, { Component } from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport ErrorField from './common/error-field';\r\nimport validate from './common/validateInfo';\r\n\r\nclass SignUpInfo extends Component {\r\n  state = {\r\n    gender: 'male',\r\n  };\r\n\r\n  onRadioBtnChanged = e => {\r\n    this.setState({\r\n      gender: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.initialize({ gender: 'male', aboutUs: null });\r\n  }\r\n\r\n  render() {\r\n    const { onBackSignUpInfoHandler, handleSubmit } = this.props;\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"wrap-info\">\r\n          <div className=\"wrap-date\">\r\n            <p className=\"wrap-info-name\">date of birth</p>\r\n            <Field\r\n              type=\"text\"\r\n              name=\"day\"\r\n              placeholder=\"DD\"\r\n              component={ErrorField}\r\n            />\r\n            <Field\r\n              type=\"text\"\r\n              name=\"month\"\r\n              placeholder=\"MM\"\r\n              component={ErrorField}\r\n            />\r\n            <Field\r\n              type=\"text\"\r\n              name=\"year\"\r\n              placeholder=\"YYYY\"\r\n              component={ErrorField}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"gender\">\r\n            <p className=\"wrap-info-name\">gender</p>\r\n            <label>\r\n              <Field\r\n                name=\"gender\"\r\n                component=\"input\"\r\n                type=\"radio\"\r\n                value=\"male\"\r\n                checked={this.state.gender === 'male'}\r\n                onChange={this.onRadioBtnChanged}\r\n              />\r\n              <span>Male</span>\r\n            </label>\r\n            <label>\r\n              <Field\r\n                name=\"gender\"\r\n                component=\"input\"\r\n                type=\"radio\"\r\n                value=\"female\"\r\n                checked={this.state.gender === 'female'}\r\n                onChange={this.onRadioBtnChanged}\r\n              />\r\n              <span>Female</span>\r\n            </label>\r\n            <label>\r\n              <Field\r\n                name=\"gender\"\r\n                component=\"input\"\r\n                type=\"radio\"\r\n                value=\"unspecified\"\r\n                checked={this.state.gender === 'unspecified'}\r\n                onChange={this.onRadioBtnChanged}\r\n              />\r\n              <span>unspecified</span>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <p className=\"wrap-info-name\">Where did you hear about us?</p>\r\n            <div className=\"wrap-select\">\r\n              <Field name=\"aboutUs\" component=\"select\">\r\n                <option value=\"nothing\" />\r\n                <option value=\"newspaper\">Newspaper</option>\r\n                <option value=\"Internet\">Internet</option>\r\n                <option value=\"Facebook\">Facebook</option>\r\n              </Field>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <footer>\r\n          <button className=\"footer-btn back\" onClick={onBackSignUpInfoHandler}>\r\n            Back\r\n          </button>\r\n          <button type=\"submit\" className=\"footer-btn\">\r\n            Next <i className=\"fas fa-arrow-right\" />\r\n          </button>\r\n        </footer>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'info',\r\n  validate,\r\n})(SignUpInfo);\r\n","import React, { Component } from 'react';\r\n\r\nclass SignUpFinished extends Component {\r\n  render() {\r\n    const { handleInfoDataForm } = this.props;\r\n    return (\r\n      <div className=\"finish\">\r\n        <div className=\"badge\">&#10004;</div>\r\n        <button className=\"finish-btn\" onClick={handleInfoDataForm}>\r\n          Go to Dashboard <i className=\"fas fa-arrow-right\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUpFinished;\r\n","import React, { Component } from 'react';\r\nimport '../index.css';\r\nimport SignUpForm from './SignUpForm';\r\nimport SignUpInfo from './SignUpInfo';\r\nimport SignUpFinished from './SignUpFinished';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Signup extends Component {\r\n  state = {\r\n    step: 0,\r\n  };\r\n\r\n  dataForm = {};\r\n\r\n  submit = values => {\r\n    const { step } = this.state;\r\n    this.setState({ step: step + 1 });\r\n    this.dataForm = { ...this.dataForm, ...values };\r\n  };\r\n\r\n  onBackSignUpInfoHandler = () => {\r\n    const { step } = this.state;\r\n    this.setState({ step: step - 1 });\r\n  };\r\n\r\n  handleInfoDataForm = () => {\r\n    console.log('dataForm', this.dataForm);\r\n  };\r\n\r\n  render() {\r\n    const { step } = this.state;\r\n    return (\r\n      <div className=\"wrap\">\r\n        <p className=\"title\">{step === 2 ? 'Thank you!' : 'Signup'}</p>\r\n        <div className=\"steps\">\r\n          <span className={`steps-line steps-line-${step}`} />\r\n        </div>\r\n        {step === 0 && <SignUpForm onSubmit={this.submit} />}\r\n        {step === 1 && (\r\n          <SignUpInfo\r\n            onSubmit={this.submit}\r\n            onBackSignUpInfoHandler={this.onBackSignUpInfoHandler}\r\n          />\r\n        )}\r\n        {step === 2 && (\r\n          <SignUpFinished handleInfoDataForm={this.handleInfoDataForm} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(state => ({\r\n  form: state.form,\r\n}))(Signup);\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as form } from 'redux-form';\r\n\r\nexport default combineReducers({\r\n  form,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport reducer from '../reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst enhancer = applyMiddleware(thunk);\r\n\r\nconst store = createStore(reducer, {}, enhancer);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport Signup from './components/Signup';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport store from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path=\"/\" component={Signup} />\n          </Switch>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}